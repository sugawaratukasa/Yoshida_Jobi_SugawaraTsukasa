//=============================================================================
//
// 床 [floor.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// 警告制御
//*****************************************************************************
#define _CRT_SECURE_NO_WARNINGS

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "background.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SCRIPT_PASS ("Data/Script/Floor/Data.txt")	//プレイヤーデータのスクリプトのパス
#define TEXTURE_PASS ("Data/Texture/ground.jpg")	//テクスチャのパス
#define POSITION (D3DXVECTOR3(0.0f,0.0f,300.0f))
#define SIZE (D3DXVECTOR3(2700.0f,2700.0f,600.0f))
#define ROTATION (D3DXVECTOR3(D3DXToRadian(-90.0f),D3DXToRadian(0.0f),D3DXToRadian(0.0f)))

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CBackground::m_pTexture = NULL;	//テクスチャ

													//=============================================================================
													// コンストラクタ
													//=============================================================================
CBackground::CBackground()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CBackground::~CBackground()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CBackground::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE_PASS,					// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CBackground::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CBackground * CBackground::Create()
{
	//背景のポインタ
	CBackground * pBackground = NULL;
	//背景のポインタがNULLの場合
	if (pBackground == NULL)
	{
		//背景のメモリ確保
		pBackground = new CBackground;
		//背景のポインタがNULLじゃない場合
		if (pBackground != NULL)
		{
			//背景の初期化処理関数呼び出し
			pBackground->Init();
		}
	}
	//背景のポインタを返す
	return pBackground;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CBackground::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//ポリゴン3Dの初期化処理関数呼び出し
	CPolygon3d::Init();
	SetPosition(POSITION);
	SetSize(SIZE);
	SetRotation(ROTATION);
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CBackground::Uninit(void)
{
	//ポリゴン3Dの終了処理関数呼び出し
	CPolygon3d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CBackground::Update(void)
{
	//ポリゴン3Dの更新処理関数呼び出し
	CPolygon3d::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CBackground::Draw(void)
{
	//ポリゴン3Dの描画処理関数呼び出し
	CPolygon3d::Draw();
}