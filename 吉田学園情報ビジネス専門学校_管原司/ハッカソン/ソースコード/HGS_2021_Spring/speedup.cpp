//=============================================================================
//
// タイトル背景 [bg_title.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "speedup.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("Data/Texture/speed_up.png")
#define POSITION (D3DXVECTOR3(-200.0f,SCREEN_HEIGHT/2,0.0f))
#define SIZE (D3DXVECTOR3(500,100,0.0f))
#define ADD_MOVE (50.0f)

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CSpeedUp::m_pTexture;	//テクスチャのポインタ

											//=============================================================================
											// コンストラクタ
											//=============================================================================
CSpeedUp::CSpeedUp()
{
	m_nCount = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CSpeedUp::~CSpeedUp()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CSpeedUp::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE_PASS,					// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CSpeedUp::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CSpeedUp * CSpeedUp::Create()
{
	//タイトル背景のポインタ
	CSpeedUp * pTitleBG = NULL;
	//タイトル背景のポインタがNULLの場合
	if (pTitleBG == NULL)
	{
		//タイトル背景のメモリ確保
		pTitleBG = new CSpeedUp;
		//タイトル背景のポインタがNULLではない場合
		if (pTitleBG != NULL)
		{
			//タイトル背景の位置設定
			pTitleBG->SetPosition(POSITION);
			//タイトル背景のサイズ設定
			pTitleBG->SetSize(SIZE);
			//タイトル背景の初期化処理関数呼び出し
			pTitleBG->Init();
		}
	}
	//タイトルロゴのボタンのポインタを返す
	return pTitleBG;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CSpeedUp::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//ボタンの初期化処理関数呼び出し
	CScene2d::Init();
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CSpeedUp::Uninit(void)
{
	//ボタンの終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CSpeedUp::Update(void)
{
	D3DXVECTOR3 Pos = GetPosition();
	//ボタンの更新処理関数呼び出し
	CScene2d::Update();
	m_nCount++;
	//移動カウント中
	if (m_nCount < 25)
	{
		Pos.x += ADD_MOVE;
	}
	if (m_nCount < 60 && m_nCount > 25)
	{

	}
	//移動カウント中
	if (m_nCount < 90 && m_nCount > 60)
	{
		Pos.x += ADD_MOVE;
	}
	SetPosition(Pos);
	if (m_nCount > 90)
	{
		Uninit();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CSpeedUp::Draw(void)
{
	//ボタンの描画処理関数呼び出し
	CScene2d::Draw();
}