//=============================================================================
//
// スタートロゴ [logo_start.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "logo_start.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("Data/Texture/title_logo.png")
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2,SCREEN_HEIGHT / 2 - 100.0f,0.0f))
#define SIZE (D3DXVECTOR3(1000.0f,200.0f,0.0f))
#define COLOR (D3DXCOLOR(0.4f,0.6f,0.3f,1.0f))

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CStartLogo::m_pTexture;	//テクスチャのポインタ

											//=============================================================================
											// コンストラクタ
											//=============================================================================
CStartLogo::CStartLogo()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CStartLogo::~CStartLogo()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CStartLogo::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE_PASS,					// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CStartLogo::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CStartLogo * CStartLogo::Create()
{
	//タイトルロゴのポインタ
	CStartLogo * pTitleLogo = NULL;
	//タイトルロゴのポインタがNULLの場合
	if (pTitleLogo == NULL)
	{
		//タイトルロゴのメモリ確保
		pTitleLogo = new CStartLogo;
		//vのポインタがNULLではない場合
		if (pTitleLogo != NULL)
		{
			//タイトルロゴの位置設定
			pTitleLogo->SetPosition(POSITION);
			//タイトルロゴのサイズ設定
			pTitleLogo->SetSize(SIZE);
			//タイトルロゴの色設定
			pTitleLogo->SetColor(COLOR);
			//タイトルロゴの初期化処理関数呼び出し
			pTitleLogo->Init();
		}
	}
	//タイトルロゴのボタンのポインタを返す
	return pTitleLogo;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CStartLogo::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//ボタンの初期化処理関数呼び出し
	CScene2d::Init();
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CStartLogo::Uninit(void)
{
	//ボタンの終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CStartLogo::Update(void)
{
	//ボタンの更新処理関数呼び出し
	CScene2d::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CStartLogo::Draw(void)
{
	//ボタンの描画処理関数呼び出し
	CScene2d::Draw();
}