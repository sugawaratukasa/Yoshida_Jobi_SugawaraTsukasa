//******************************************************************************
// パーティクル処理 [particle.cpp]
// Author : 管原　司
//******************************************************************************
//******************************************************************************
// インクルードファイル
//******************************************************************************
#include "../System/main.h"
#include "../System/manager.h"
#include "../System/renderer.h"
#include "../System/scene.h"
#include "../System/scene2d.h"
#include "particle.h"
//******************************************************************************
// マクロ定義
//******************************************************************************
#define PARTICLE_TEXTURE_1	("data/Texture/Effect/particle001.png")	// パーティクルテクスチャ1
#define PARTICLE_TEXTURE_2	("data/Texture/Effect/fire002.png")		// パーティクルテクスチャ2
#define PARTICLE_TEXTURE_3	("data/Texture/Effect/particle008.png")		// パーティクルテクスチャ3
//******************************************************************************
// 静的メンバ変数
//******************************************************************************
LPDIRECT3DTEXTURE9 CParticle::m_pTexture[TEX_TYPE_MAX] = {};
//******************************************************************************
// コンストラクタ
//******************************************************************************
CParticle::CParticle(int nPriority) : CScene2d(nPriority)
{
}
//******************************************************************************
// デストラクタ
//******************************************************************************
CParticle::~CParticle()
{
}
//******************************************************************************
// テクスチャ読み込み
//******************************************************************************
HRESULT CParticle::Load(void)
{
	// レンダラー取得
	LPDIRECT3DDEVICE9 pDevice = CSceneManager::GetRenderer()->GetDevice();

	// テクスチャ読み込み
	D3DXCreateTextureFromFile(pDevice, PARTICLE_TEXTURE_1, &m_pTexture[TEX_TYPE_CIRCLE]);
	D3DXCreateTextureFromFile(pDevice, PARTICLE_TEXTURE_2, &m_pTexture[TEX_TYPE_EXPLOSION]);
	D3DXCreateTextureFromFile(pDevice, PARTICLE_TEXTURE_3, &m_pTexture[TEX_TYPE_FLASH]);
	return S_OK;
}
//******************************************************************************
// テクスチャ破棄
//******************************************************************************
void CParticle::Unload(void)
{
	// 3回繰り返す
	for (int nCnt = INIT_INT; nCnt < TEX_TYPE_MAX; nCnt++)
	{
		// テクスチャの破棄
		if (m_pTexture[nCnt] != NULL)
		{
			// テクスチャRelease
			m_pTexture[nCnt]->Release();

			// m_pTextureをNULLに
			m_pTexture[nCnt] = NULL;
		}
	}
}
//******************************************************************************
// 初期化関数
//******************************************************************************
HRESULT CParticle::Init(void)
{
	// 初期化
	CScene2d::Init();

	return S_OK;
}
//******************************************************************************
// 終了関数
//******************************************************************************
void CParticle::Uninit(void)
{
	// 終了
	CScene2d::Uninit();
}
//******************************************************************************
// 更新関数
//******************************************************************************
void CParticle::Update(void)
{
	// 更新
	CScene2d::Update();
}
//******************************************************************************
// 描画関数
//******************************************************************************
void CParticle::Draw(void)
{
	// 描画
	CScene2d::Draw();
}
//******************************************************************************
// 情報設定関数
//******************************************************************************
void CParticle::SetParticle(D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXVECTOR3 rot, D3DXCOLOR col, TEX_TYPE TexType)
{
	// 位置座標設定
	SetPosition(pos);

	// サイズ設定
	SetSize(size);

	// 向き設定
	SetRot(rot);

	// カラー設定
	SetRGBA(col);

	// テクスチャタイプ
	m_TexType = TexType;

	// テクスチャ受け渡し
	BindTexture(m_pTexture[m_TexType]);
}